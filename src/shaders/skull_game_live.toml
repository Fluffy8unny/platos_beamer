name = "skull_game_live"

vertex="""
     #version 330

      in vec2 position;
      in vec2 uv;
      
      out vec2 uv_coords;
      void main() {
          uv_coords = uv;
          gl_Position = vec4(position, 0.0, 1.0);
      }
     """ 

fragment="""
      #version 330  

      in vec2 uv_coords;
      uniform sampler2D live_tex;
      uniform sampler2D clouds;
      uniform sampler2D clouds2;
      uniform sampler2D sky;
      uniform sampler2D moon_texture;
      uniform vec2 moon_pos_u;
      uniform float moon_scale_u;
      uniform float time;

      out vec4 color;
      
      vec2 cvt(vec2 inp){
        return inp/2.0 + 0.5;
        }
      void main(){ 
         //water
         float df  = 0.004*sin(time*10 + uv_coords.y*250);
         float dy = (1.0-smoothstep(0.4,0.6,uv_coords.y))*df;
         float uvx = uv_coords.x + dy;
         float val = texture(live_tex, vec2(uvx, uv_coords.y)).x;   

         //moonlight shadow
         vec2 moon_pos = vec2(moon_pos_u.x,-moon_pos_u.y);
         vec2 moon_scale = vec2(moon_scale_u,moon_scale_u);
         vec2 moon_start = cvt(moon_pos-moon_scale);
         vec2 moon_end = cvt(moon_pos+moon_scale);
         
         vec2 muv =(vec2(uvx,uv_coords.y)- moon_start)/(moon_scale);
         float invy = 1.0 - muv.y;
         float linscale = invy/10.0;
         float moon_val = 0.0;
         vec2 mx = (vec2(uvx+linscale,uv_coords.y)- moon_start)/(moon_scale+2*linscale);
         if (uvx>moon_start.x - linscale && uvx<moon_end.x+linscale){
           if(uv_coords.y>moon_start.y && uv_coords.y<moon_end.y){
             moon_val = texture(moon_texture,vec2(mx.x,invy)).r * muv.y;
             }
         }

         //clouds
         float offset_x = uv_coords.x + time/22.0;
         float offset_y = uv_coords.y +  time/45.0;

         float offset2_x = uv_coords.x - time/20.0;
         float offset2_y = uv_coords.y - time/30.0;

         float cloud_offsetet = texture(clouds2, vec2(offset_x, offset_y)).x;
         float cloud_offsetett = texture(clouds2, vec2(offset_x, offset_y)).y;
         float cloud_offsetett2 = texture(clouds2, vec2(offset2_x, offset2_y)).z;
         float cloud_val = texture(clouds, uv_coords).y;
         


         //composing
         float alpha = 1.0-0.5*( uv_coords.y + 1.0);
         float cloud_level = cloud_val*cloud_offsetet*cloud_offsetett*cloud_offsetett2;
         val = val*(cloud_val+0.025)*0.6+cloud_level*0.4;

         vec4 sky_color = vec4(texture(sky, vec2(uvx,uv_coords.y)).rgb*0.1, 0.8-alpha*alpha);
         vec4 other_color = vec4(cloud_level*2+ moon_val,
                       val,
                       val,
                       alpha*alpha);
         color =  other_color*0.7 + sky_color;
      }
      """
